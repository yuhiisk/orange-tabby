// ==========================================================================
// Functions
// ==========================================================================

$baseFontSize: 13;
$showFontSizeDebug: null;

//
// Font size specified relative
// (!require: _config.scss - $baseFontSize: {number})
// ==========================================================================
@function initFontSize($base) {
	$fontlist: (); $prepend: (); $append: ();
	$start: 8;
	$end: 40;

	@for $i from $start to $base {
		$per: ceil(percentage($i / $base));
		$prepend: append($prepend, $per);
	}
	@for $i from $base through $end {
		$per: ceil(percentage($i / $base));
		$append: append($append, $per);
	}
	$fontlist: join($prepend, $append);
	@if $showFontSizeDebug { @debug $fontlist; }
	@return $fontlist;
}
$fontSizeList: initFontSize($baseFontSize);

// getter
//
// usage:
// .hoge {
//  	font-size: fz(10); => font-size: ( 10 / $baseFontSize )%;
//
//      .foo {
//          font-size: fz(15, 10);  => font-size: ( 15 / 10 )%;
//      }
// }
@function fz($size, $force: null) {
	$val: null;

	@if $size < 8 {
		$size: 8;
	}
	@if $size > 40 {
		$size: 40;
	}
	@if type-of($force) == 'number' {
		$val: ceil(percentage($size / $force));

		@if $showFontSizeDebug { @debug $val; }
		@return $val;
	} @else if $force != null and type-of($force) != 'number' {
		@warn '#{$force} is not number.';
	}
	$val: nth($fontSizeList, $size - 7);

	@if $showFontSizeDebug { @debug $val; }
	@return $val;
}
